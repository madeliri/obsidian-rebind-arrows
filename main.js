/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  arrowDown: "KeyJ",
  arrowUp: "KeyK"
};
function isKeyRelevant(document2, event) {
  return document2.activeElement && (document2.activeElement.hasClass("prompt-input") || document2.querySelector(".suggestion-container")) && event.ctrlKey;
}
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const arrowDown_key = this.settings.arrowDown;
    const arrowUp_key = this.settings.arrowUp;
    document.addEventListener("keydown", (e) => {
      if (isKeyRelevant(document, e) && e.code == "KeyJ") {
        e.preventDefault();
        document.dispatchEvent(new KeyboardEvent("keydown", { "key": "ArrowDown", "code": "ArrowDown" }));
      }
    });
    document.addEventListener("keydown", (e) => {
      if (isKeyRelevant(document, e) && e.code == "KeyK") {
        e.preventDefault();
        document.dispatchEvent(new KeyboardEvent("keydown", { "key": "ArrowUp", "code": "ArrowUp" }));
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Binding for down arrow").setDesc('by default "KeyJ"').addText((text) => text.setPlaceholder("Enter your key").setValue(this.plugin.settings.arrowDown).onChange(async (value) => {
      this.plugin.settings.arrowDown = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Binding for up arrow").setDesc('by default "KeyK"').addText((text) => text.setPlaceholder("Enter your key").setValue(this.plugin.settings.arrowUp).onChange(async (value) => {
      this.plugin.settings.arrowUp = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
